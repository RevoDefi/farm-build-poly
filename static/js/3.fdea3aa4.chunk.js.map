{"version":3,"sources":["hooks/useTickets.ts","hooks/useGetLotteryHasDrawn.ts","hooks/useTokenBalance.ts","hooks/useBuyLottery.ts","utils/lotteryUtils.js","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx"],"names":["useTotalRewards","useState","BigNumber","rewards","lotteryContract","useLottery","fastRefresh","useRefresh","useEffect","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWallet","ticketsContract","useLotteryTicket","fetchBalance","useCallback","a","getTotalClaim","claim","useWinningNumbers","winngNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","useGetLotteryHasDrawn","lotteryHasDrawn","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","console","log","cakeABI","cakeContract","getContract","getCakeAddress","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","useTokenBalance","ethereum","getTokenBalance","res","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","multiClaim","txHash","useMultiBuyLottery","onMultiBuy","amount","multiBuy","useMaxNumber","max","setMax","fetchMax","getMax","maxNumber","multiCall","abi","calls","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","error","getTicketsAmount","issueIndex","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","claimedStatus","unClaimedIds","filter","calls3","lotteryAbi","finanltokenIds","forEach","r","push","getLotteryIssueIndex","matchNumber","issueIdex","drawed","historyAmount","parseInt","historyNumbers","winningNumbers","StyledTokenInput","styled","div","StyledSpacer","props","theme","spacing","StyledTokenAdornmentWrapper","StyledMaxText","colors","primary","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onChange","onSelectMax","value","TranslateString","useI18n","Input","endAdornment","size","onClick","placeholder","toLocaleString","BuyTicketModal","onDismiss","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","title","e","currentTarget","Tips","Announce","Final","ModalActions","fullWidth","variant","disabled"],"mappings":"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","file":"static/js/3.fdea3aa4.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    // const fetchBalance = async () => {\n    //   const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n    //   setTickets(res)\n    // }\n\n    // if (account && lotteryContract && ticketsContract) {\n    //   fetchBalance()\n    // }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    // const fetchBalance = async () => {\n    //   const res = await getTotalRewards(lotteryContract)\n    //   setRewards(new BigNumber(res))\n    // }\n\n    // if (lotteryContract) {\n    //   fetchBalance()\n    // }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winngNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  // useEffect(() => {\n  //   if (account && lotteryContract) {\n  //     const fetchLotteryStatus = async () => {\n  //       const state = await getLotteryStatus(lotteryContract)\n  //       console.log(state,\"satet\")\n  //       setLotteryHasDrawn(state)\n  //     }\n\n  //     fetchLotteryStatus()\n  //   }\n  // }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      console.log(cakeABI,\"cakeabii\")\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  // await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finanltokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finanltokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  // try {\n  //   const issueIdex = await lotteryContract.methods.issueIndex().call()\n  //   const length = await getTicketsAmount(ticketsContract, account)\n  //   // eslint-disable-next-line prefer-spread\n  //   const calls1 = Array.apply(null, { length }).map((a, i) => [\n  //     ticketsContract.options.address,\n  //     'tokenOfOwnerByIndex',\n  //     [account, i],\n  //   ])\n  //   const res = await multiCall(ticketAbi, calls1)\n  //   const tokenIds = res.map((id) => id.toString())\n  //   const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  //   const ticketIssues = await multiCall(ticketAbi, calls2)\n  //   const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  //   const claimedStatus = await multiCall(ticketAbi, calls3)\n\n  //   const drawed = await getLotteryStatus(lotteryContract)\n\n  //   const finalTokenids = []\n  //   ticketIssues.forEach(async (ticketIssue, i) => {\n  //     // eslint-disable-next-line no-empty\n  //     if (!drawed && ticketIssue.toString() === issueIdex) {\n  //     } else if (!claimedStatus[i][0]) {\n  //       finalTokenids.push(tokenIds[i])\n  //     }\n  //   })\n\n  //   const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n  //   const rewards = await multiCall(lotteryAbi, calls4)\n  //   const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\n\n  //   return claim\n  // } catch (err) {\n  //   console.error(err)\n  // }\n  return BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\n    return amount / 1e18 / 10\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  onSelectMax?: () => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(new BigNumber(10))))\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy('10', numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > 50) {\n      setVal('50')\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * 10\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"CAKE\"\n      />\n      <div>\n        <Tips>{TranslateString(456, 'Your amount must be a multiple of 10 CAKE')}</Tips>\n        <Tips>{TranslateString(458, '1 Ticket = 10 CAKE')}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} CAKE`)}</Final>\n      </div>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          fullWidth\n          disabled={pendingTx || parseInt(val) > Number(maxTickets) || parseInt(val) > 50 || parseInt(val) < 1}\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n"],"sourceRoot":""}