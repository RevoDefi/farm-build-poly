{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","hooks/useHarvest.ts","hooks/useApprove.ts","config/index.ts","components/layout/Flex.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","useHarvest","farmPid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onReward","useCallback","a","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useApprove","lpContract","console","log","onApprove","approve","tx","useLotteryApprove","cakeContract","useCake","lotteryContract","useLottery","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useStake","onStake","amount","stake","info","useUnstake","onUnstake","unstake","StyledTokenInput","StyledSpacer","props","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onChange","onSelectMax","value","depositFeeBP","toLocaleString","Input","endAdornment","size","placeholder","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","ModalActions","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","setBnbPrice","useEffect","fetch","then","response","json","data","price","usd","catch","err","tokenMode","fastRefresh","useRefresh","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","map","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/11.2925183d.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n  console.log(lpContract,\"lpContract in approve\")\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://pswap.revonetwork.app/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://pswap.revonetwork.app/#/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n         View on Matic\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n   // const lpContract = isTokenOnly ? getContract(ethereum as provider, tokenAddress) : getContract(ethereum as provider, lpAddress)\n   console.log(lpContract,\"contract\");\n   \n   const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          REVO\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'REVO per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n  box-shadow:0 0 4px 2px #c0c0c0;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'REVO'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'REVO' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://explorer-mainnet.maticvigil.com/address/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://explorer-mainnet.maticvigil.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\n\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\n\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  // const bnbPrice = usePriceBnbBusd()\n  const [bnbPrice,setBnbPrice] = useState<BigNumber>();\n\n\n  useEffect(()=>{\n  \n\n    fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=matic-network&vs_currencies=usd\")\n  .then(\n    function(response) {\n     \n\n      // Examine the text in the response\n      response.json().then(function(data) {\n        console.log(data);\n        const price = data['matic-network'].usd;\n\n        console.log(\"pirrrrr\",price)\n        setBnbPrice(new BigNumber(price))\n      });\n    }\n  )\n  .catch(function(err) {\n    console.log('Fetch Error :-S', err);\n  })\n\n\n\n \n  },[])\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        console.log(\"xsxsxsxsxsssxs\",cakePrice.toNumber(),apy.toNumber(),bnbPrice.toNumber())\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n        // else if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n        //   totalValue = totalValue.times(1);\n        //   console.log(\"dedededededede\",totalValue)\n        // }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens to earn REVO')\n            :\n          TranslateString(320, 'Stake LP tokens to earn REVO')\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback REVO')}\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          {bnbPrice?<>  <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route></>:null}\n        \n        </FlexLayout>\n      </div>\n      {/* <Image  alt=\"il\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}